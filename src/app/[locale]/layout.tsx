import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { hasLocale, NextIntlClientProvider } from "next-intl";
import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";
import { setRequestLocale } from "next-intl/server";
import { Toaster } from "sonner";
import { AppSidebar } from "@/components/common";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { cookies } from "next/headers";
import { AppToolBar } from "../../components/common";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

//https://nextjs.org/docs/messages/sync-dynamic-apis
//Async params error fixed with this docs
//Internationalization reference - http://youtube.com/watch?v=2Jh9olZXBfw&t=633s
//https://medium.com/@f3ssoftware/internationalization-with-next-js-15-and-react-intl-6b67b5a2d28d
//Check https://next-intl.dev/docs/getting-started/app-router/with-i18n-routing

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;

  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  setRequestLocale(locale);

  const cookieStore = await cookies();
  const defaultOpen = cookieStore.get("sidebar_state")?.value === "true";

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider>
          <SidebarProvider defaultOpen={defaultOpen}>
            <Toaster expand={true} richColors />
            <AppSidebar />
            <div className="w-full">
              <AppToolBar />
              <main className="px-6 mt-6">
                <SidebarTrigger />
                {children}
              </main>
            </div>
            {/* <main className="px-6 w-[calc(100% - 280px)]">{children}</main> */}
          </SidebarProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
